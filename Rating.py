import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="–†–µ–π—Ç–∏–Ω–≥ –≤—Å—Ç—É–ø–Ω–∏–∫—ñ–≤", layout="wide")
st.title("üéì –†–µ–π—Ç–∏–Ω–≥ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤")

# –ö–æ–Ω—Ñ—ñ–≥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ –º—ñ—Å—Ü—è)
max_places = {
    '–ë–µ–∑–ø–µ–∫–∞ —ñ–Ω—Ñ–æ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º —Ç–∞ –º–µ—Ä–µ–∂': 20,
    '–ö–æ–º–ø`—é—Ç–µ—Ä–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –º–µ—Ä–µ–∂—ñ': 23,
    '–ü—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —ñ–Ω—Ñ–æ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º': 20,
    '–Ü–Ω—Ñ–æ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –º–µ—Ä–µ–∂—ñ': 20,
    '–°–∏—Å—Ç–µ–º–∏ —Ç–∞ –º–µ—Ä–µ–∂—ñ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–≤`—è–∑–∫—É': 20,
    '–ü–æ—à—Ç–æ–≤–æ-–ª–æ–≥—ñ—Å—Ç–∏—á–Ω—ñ —Å–∏—Å—Ç–µ–º–∏': 20
}

# –í–∏–±—ñ—Ä –∫–ª–∞—Å—É
class_level = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å", ["9 –∫–ª–∞—Å", "11 –∫–ª–∞—Å"])

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
uploaded_file = st.file_uploader("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    df = df.rename(columns=lambda x: str(x).strip())

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü—ñ—è –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
    if 'ID' not in df.columns:
        df.insert(0, 'ID', range(1, len(df) + 1))
    if '–ü—Ä—ñ–∑–≤–∏—â–µ' not in df.columns:
        df.rename(columns={df.columns[1]: '–ü—Ä—ñ–∑–≤–∏—â–µ'}, inplace=True)
    if "—ñ–º‚Äô—è" in df.columns:
        df.rename(columns={"—ñ–º‚Äô—è": "–Ü–º'—è"}, inplace=True)
    if '–ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ' in df.columns:
        df.rename(columns={'–ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ': '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ'}, inplace=True)
    if '–û—Ü—ñ–Ω–∫–∞' not in df.columns and '–æ–±—â–∏–π –±–∞–ª' in df.columns:
        df.rename(columns={'–æ–±—â–∏–π –±–∞–ª': '–û—Ü—ñ–Ω–∫–∞'}, inplace=True)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π (–º–∞–∫—Å–∏–º—É–º 5)
    for i in range(1, 6):
        if str(i) not in df.columns:
            df[str(i)] = None

    # –û–±—Ä–æ–±–∫–∞ –æ—Ü—ñ–Ω–æ–∫
    def parse_score(x):
        try:
            score = float(x)
            return score if score >= 120 else None
        except:
            return '–ø' if str(x).lower() == '–ø' else None

    df['–û—Ü—ñ–Ω–∫–∞'] = df['–û—Ü—ñ–Ω–∫–∞'].apply(parse_score)
    df = df[df['–û—Ü—ñ–Ω–∫–∞'].notnull()].copy()

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: –ø—ñ–ª—å–≥–∏ = –Ω–∞–π–≤–∏—â–µ
    df['tmp_score'] = df['–û—Ü—ñ–Ω–∫–∞'].apply(lambda x: float('inf') if x == '–ø' else float(x))
    df = df.sort_values(by='tmp_score', ascending=False).reset_index(drop=True)

    # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ
    specialties = {k: [] for k in max_places}

    def assign(row):
        for i in ['1', '2', '3', '4', '5']:
            spec = row[i]
            if spec in specialties and len(specialties[spec]) < max_places[spec]:
                specialties[spec].append(row['ID'])
                return spec
        return '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç'

    df['–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å'] = df.apply(assign, axis=1)
    df.drop(columns=['tmp_score'], inplace=True)

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫
    df['–û—Ü—ñ–Ω–∫–∞'] = df['–û—Ü—ñ–Ω–∫–∞'].apply(lambda x: '–ø' if x == '–ø' else round(float(x), 1))

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: –ø—ñ–ª—å–≥–æ–≤–∏–∫–∏ –∑–≤–µ—Ä—Ö—É, –ø–æ—Ç—ñ–º –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é
    df['sort_score'] = df['–û—Ü—ñ–Ω–∫–∞'].apply(lambda x: -1 if x == '–ø' else -float(x))
    df = df.sort_values(by=['–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å', 'sort_score'], ascending=[True, True])
    df.drop(columns=['sort_score'], inplace=True)

    # –ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Äî –≤–Ω–∏–∑—É
    contract_data = df[df['–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å'] == '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç']
    passed_data = df[df['–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å'] != '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç']
    df = pd.concat([passed_data, contract_data], ignore_index=True)

    # --- –§—ñ–ª—å—Ç—Ä–∏ ---
    col1, col2, col3 = st.columns(3)
    with col1:
        f1 = st.text_input("–§—ñ–ª—å—Ç—Ä: –ü—Ä—ñ–∑–≤–∏—â–µ")
    with col2:
        f2 = st.text_input("–§—ñ–ª—å—Ç—Ä: –Ü–º'—è")
    with col3:
        f3 = st.selectbox("–§—ñ–ª—å—Ç—Ä: –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å", ['–£—Å—ñ'] + list(df['–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å'].unique()))

    filtered = df.copy()
    if f1:
        filtered = filtered[filtered['–ü—Ä—ñ–∑–≤–∏—â–µ'].str.contains(f1, case=False, na=False)]
    if f2:
        filtered = filtered[filtered["–Ü–º'—è"].str.contains(f2, case=False, na=False)]
    if f3 != '–£—Å—ñ':
        filtered = filtered[filtered['–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å'] == f3]

    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final = filtered[['–û—Ü—ñ–Ω–∫–∞', '–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å', '–ü—Ä—ñ–∑–≤–∏—â–µ', "–Ü–º'—è", '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ']]
    st.dataframe(final, use_container_width=True)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        final.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç')
    st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É Excel", data=output.getvalue(),
                       file_name="—Ä–µ–π—Ç–∏–Ω–≥.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

